{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["translateMethod","ga","charCodeAt","onset","split","nuclues","coda","shift","sentence","map","str","strUniCode","idx","parseInt","includes","String","fromCharCode","join","addCoda","separation","App","useState","setSentence","type","setType","result","setResult","types","label","onTypeChange","e","target","value","className","arrType","key","name","onChange","checked","onClick","textarea","document","createElement","body","append","select","execCommand","parentElement","removeChild","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kLAEMA,EAAkB,CACtBC,GAAI,SAAIC,WAAW,GACnBC,MAAO,qHAAsBC,MAAM,IACnCC,QAAS,iIAAwBD,MAAM,IACvCE,KAAK,CAAE,IAAH,mBAAU,qKAA8BF,MAAM,MAElDG,MAAO,SAASC,GAAW,IAAD,OACxB,OAAOA,EAASJ,MAAM,IAAIK,KAAI,SAAAC,GAC5B,IAAIC,EAAaD,EAAIR,WAAW,GAC5BU,EAAMC,UAAUF,EAAa,EAAKV,IAAM,KAE5C,MAAI,CAAC,EAAG,EAAG,EAAG,EAAG,IAAIa,SAASF,GACrBG,OAAOC,aAAaL,EAAa,KAGnCD,KACNO,KAAK,KAEVC,QAAS,SAASV,GAChB,OAAOA,EAASJ,MAAM,IAAIK,KAAI,SAAAC,GAC5B,IAAIC,EAAaD,EAAIR,WAAW,GAEhC,OAAIS,EAAa,OAAS,MAAQA,EAAmBD,EAGzC,IADFG,UAAUF,EAAa,OAAS,IAEjCI,OAAOC,aAAaL,EAAa,IAGnCD,KACNO,KAAK,KAEVE,WAAY,SAASX,GAAW,IAAD,OAC7B,OAAOA,EAASJ,MAAM,IAAIK,KAAI,SAAAC,GAC5B,IAAIC,EAAaD,EAAIR,WAAW,GAEhC,GAAIS,EAAa,OAAS,MAAQA,EAAY,OAAOD,EAErD,IAAIE,EAAMC,SAAUF,EAAa,OACjC,OAAO,EAAKR,MAAMU,SAASD,EAAM,MAAM,EAAKP,QAAQQ,SAASD,EAAM,IAAM,KAAK,EAAKN,KAAKO,SAASD,EAAM,QACtGK,KAAK,MAoFGG,EAhFH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTb,EADS,KACCc,EADD,OAEQD,mBAAS,SAFjB,mBAETE,EAFS,KAEHC,EAFG,OAGYH,mBAAS,IAHrB,mBAGTI,EAHS,KAGDC,EAHC,KAKVC,EAAQ,CAAC,CACbC,MAAO,qBACPL,KAAM,SACL,CACDK,MAAO,4BACPL,KAAM,WACL,CACDK,MAAO,8FACPL,KAAM,eAGFM,EAAe,SAACC,GACpBN,EAAQM,EAAEC,OAAOC,QAyBnB,OACE,yBAAKC,UAAU,OACb,wHACA,6BAEIN,EAAMlB,KAAI,gBAAEmB,EAAF,EAAEA,MAAaM,EAAf,EAASX,KAAT,OACR,2BAAOY,IAAKP,GACV,2BACEL,KAAK,QACLa,KAAK,OACLJ,MAAOE,EACPG,SAAUR,EACVS,QAASf,IAASW,IAEpB,8BAAON,QAKf,6BACE,2BACEL,KAAK,OACLS,MAAOxB,EACP6B,SA9Cc,SAACP,GACrBR,EAAYQ,EAAEC,OAAOC,UA+CjB,4BAAQO,QA7Cc,WAC1B,IAAI7B,EACEiB,EAAMlB,KAAI,qBAAGc,QAAiBT,SAASS,GAClCvB,EAAgBuB,GAAMf,GAGxBA,EAGTkB,EAAUhB,KAoCN,kBAGAe,GACA,6BACE,2BAAIA,GACJ,4BAAQc,QAxCO,WACrB,IAAIC,EAAWC,SAASC,cAAc,YACtCD,SAASE,KAAKC,OAAOJ,GACrBA,EAASR,MAAQP,EACjBe,EAASK,SACTJ,SAASK,YAAY,QACrBN,EAASO,cAAcC,YAAYR,KAkC7B,oBC3GUS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c9ac1654.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst translateMethod = {\n  ga: '가'.charCodeAt(0),\n  onset: 'ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ'.split(''),\n  nuclues: 'ㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣ'.split(''),\n  coda: ['', ...'ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ'.split('')],\n\n  shift: function(sentence) {\n    return sentence.split('').map(str => {\n      let strUniCode = str.charCodeAt(0);\n      let idx = parseInt((strUniCode - this.ga) / 588);\n\n      if ([0, 3, 7, 9, 12].includes(idx)) {\n        return String.fromCharCode(strUniCode + 588);\n      }\n\n      return str;\n    }).join('');\n  },\n  addCoda: function(sentence) {\n    return sentence.split('').map(str => {\n      let strUniCode = str.charCodeAt(0);\n\n      if (strUniCode < 44032 || 55203 < strUniCode) return str;\n\n      let idx = parseInt((strUniCode - 44032) % 28);\n      if (idx === 0) {\n        return String.fromCharCode(strUniCode + 21);\n      }\n\n      return str;\n    }).join('');\n  },\n  separation: function(sentence) {\n    return sentence.split('').map(str => {\n      let strUniCode = str.charCodeAt(0);\n\n      if (strUniCode < 44032 || 55203 < strUniCode) return str;\n\n      let idx = parseInt((strUniCode - 44032));\n      return this.onset[parseInt(idx / 588)]+this.nuclues[parseInt(idx % 588 / 28)]+this.coda[parseInt(idx % 28)];\n    }).join('');\n  },\n};\n\nconst App = () => {\n  const [sentence, setSentence] = useState('');\n  const [type, setType] = useState('shift');\n  const [result, setResult] = useState('');\n\n  const types = [{\n    label: 'Shift 권법',\n    type: 'shift'\n  }, {\n    label: '받침 넣기',\n    type: 'addCoda'\n  }, {\n    label: 'ㅋㅣㅂㅗㄷㅡㄱㅏ ㅇㅣㅅㅏㅇㅎㅐ',\n    type: 'separation'\n  }];\n\n  const onTypeChange = (e) => {\n    setType(e.target.value);\n  }\n  const onInputChange = (e) => {\n    setSentence(e.target.value);\n  }\n  const onTranslateBtnClick = () => {\n    let str = (() => {\n      if (types.map(({ type }) => type).includes(type)) {\n        return translateMethod[type](sentence);\n      }\n\n      return sentence;\n    })();\n\n    setResult(str);\n  }\n  const onCopyBtnClick = () => {\n    let textarea = document.createElement('textarea');\n    document.body.append(textarea);\n    textarea.value = result;\n    textarea.select();\n    document.execCommand('copy');\n    textarea.parentElement.removeChild(textarea);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>한국인만 읽을수 있는 문장 변환기</h1>\n      <div>\n        {\n          types.map(({label, type: arrType}) => (\n            <label key={label}>\n              <input\n                type='radio'\n                name='type'\n                value={arrType}\n                onChange={onTypeChange}\n                checked={type === arrType}\n              />\n              <span>{label}</span>\n            </label>\n          ))\n        }\n      </div>\n      <div>\n        <input\n          type='text'\n          value={sentence}\n          onChange={onInputChange}\n        />\n        <button onClick={onTranslateBtnClick}>변신!</button>\n      </div>\n      {\n        result &&\n        <div>\n          <p>{result}</p>\n          <button onClick={onCopyBtnClick}>복사!</button>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}